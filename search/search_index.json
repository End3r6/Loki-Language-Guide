{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#loki-documentation-homepage","title":"Loki Documentation Homepage","text":"<p>Welcome to the Loki documentation homepage! Here, you'll find resources to help you learn more about the Loki programming language and its features.</p>"},{"location":"#navigation","title":"Navigation","text":"<ul> <li>Language Overview</li> <li>Integration Packages</li> <li>Getting Started</li> <li>Contributing</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>Welcome to Loki Getting Started! This page will guide you through the process of setting up Loki and writing your first Loki script.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you start, make sure you have the following:</p> <ol> <li>A text editor or an integrated development environment (IDE) that supports Markdown.<ul> <li>VSCode is reccomended as it has full language integration with syntax highlighting and its own language server.</li> </ul> </li> <li>A basic understanding of programming concepts, such as variables, functions, and control structures.</li> </ol>"},{"location":"getting-started/#setting-up-loki","title":"Setting Up Loki","text":"<p>Download the latest compiler from the Official Loki Releases page. Follow the installation instructions for your operating system.</p> <p>Once installed, you can verify that Loki is working correctly by running the following command in your terminal:</p> <pre><code>loki --version\n</code></pre> <p>This should display the version of Loki you just installed.</p> <p>Next, you'll want to install the integration package for your chosen game engine. You can find more info at the Integration Packages Site</p> <p>Follow the installation instructions for your target game engine.</p>"},{"location":"getting-started/#writing-your-first-script","title":"Writing Your First Script","text":"<p>There are several ways to use loki and this may change depending on the integration package you are using. This guide assumes for learning purposes that you will be using the built in command line tool to write and compile your loki projects. To learn more about each Integration Package, visit the Integration Packages Site</p>"},{"location":"getting-started/#step-1-create-a-new-project","title":"Step 1: Create a New Project","text":"<p>To start open your command line tool and enter the commands</p> <pre><code>mkdir my-loki-project\ncd ./my-loki-project\nloki new my-loki-project\n</code></pre> <p>This will create a new loki project in your local user directory</p>"},{"location":"getting-started/#step-2-creating-your-first-loki-file","title":"Step 2: Creating Your First Loki File","text":"<p>Open the my-loki-project folder in your chosen text-editor/IDE and create a new file called <code>MyFirstLoki.loki</code>.</p> <p>In this file write:</p> <pre><code>#HelloWorld:1\nHello, World!\n</code></pre>"},{"location":"getting-started/#step-3-build-the-loki-project","title":"Step 3: Build the Loki Project","text":"<p>Open your command line tool and navigate to your project directory. Run the following command:</p> <pre><code>loki build\n</code></pre> <p>This will create a file called <code>my-loki-project.lid</code> under the <code>bin/output/</code> directory in your loki project. This is the file that you will use in your chosen game engine.</p>"},{"location":"getting-started/#conclusion","title":"Conclusion","text":"<p>Congrats! You have written your first loki file and are ready to create high quality interactions in your games!</p> <p>Go fourth and create!</p>"},{"location":"language-overview/","title":"Loki Language Overview","text":""},{"location":"language-overview/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Langauge Overview</li> <li>Types and Variables</li> <li>Control Structures</li> <li>Functions</li> <li>Files</li> <li>Functions vs. references</li> <li>Conclusion</li> </ol>"},{"location":"language-overview/#introduction","title":"Introduction","text":"<p>Welcome to the Loki language overview! This document provides a comprehensive overview of the Loki programming language, including its syntax, semantics, and features.</p>"},{"location":"language-overview/#language-overview","title":"Language Overview","text":"<p>Loki is a statically typed programming language designed for building scalable and maintainable dialogue systems for any game engine or programming lnaguage out there. It is specially designed so it compiles down to a raw format that is understandabele by any programming language out there. The only thing that language has to be able to do is read and write text data.</p> <p>At a high level, loki files have two main types of code. Dialogue, and Bracket Code. Dialogue is any plain text under a header, see here for info on headers, and Bracket Code is any code contained in <code>[]</code>.</p> <p>Loki uses a system similar to that of programming languages such as Java, C# or CPP. That system being that lines of code must have a semi colon at the end of it.</p> <p>For example:</p> <pre><code>#HelloLoki:1\nGreetings my friend! ;\nYou are looking great today! [Sound.Play(\"happy.mp3\")];\n</code></pre> <p>You can see the header, dialogue, and bracket code all used in this example loki script.</p>"},{"location":"language-overview/#keywords","title":"Keywords","text":"<p>Loki uses many of the same keywords that you would find in many other programming languages. It has some of the basic variable types such as int, bool, and string, while also having some more advanced keywords like using.</p> <p>Here is an over view of each keyword and its use case:</p> <p>Integers represent whole numbers in loki. They are primarily used to define the type in functions. See below for an example on how it may be used</p> <pre><code>#ExampleFunctions(int exInt)\n</code></pre> <p>String represent variable text in loki. They are primarily used to define the type in functions. See below for an example on how it may be used</p> <pre><code>#ExampleFunctions(string exString)\n</code></pre> <p>Booleans represent true or false in loki. They are primarily used to define the type in functions. See below for an example on how it may be used</p> <pre><code>#ExampleFunctions(bool exBool)\n</code></pre>"},{"location":"language-overview/#literals","title":"Literals","text":"<p>Loki provides many options that enable you to write cohesive dialogue. It structures things at a File -&gt; Header -&gt; Code system.</p>"},{"location":"language-overview/#headers","title":"Headers","text":"<p>Headers  are the parts of the code that hold dialogue and code. Any code that is inside of them gets run one line at a time. Lines are determined by a semicolon. In order to run the next line of code, the integration package has to request it from the current header. If you need other options, see the functions here: Functinos </p> <p>To learn more about headers, see below:</p> <pre><code>#ExampleHeader:1\n</code></pre> <p>You begin with a # symbol followed by the header name, then the variation id. The variation id is the part which determines which variation of the header should be played once the name is called. For example:</p> <pre><code>#ExampleHeader:1\n//Some code\n\n#ExampleHeader:2\n//More code\n\n#ExampleHeader:3\n//Even More code\n</code></pre> <p>In this case, if you were to call <code>#ExampleHeader</code>, it would begin with the first variation. Then, if you call it again, it would begin with the second variation and if you called it again, it would begin with the thrid variation. If you reach the final variation and call it again, it would repeat the final variation.</p> <p>If you find yourself in a place where you need to call any other header than the order followed by the variations, you can run the following code:</p> <pre><code>[#ExampleHeader:1]\n</code></pre> <p>This will call the first variation of <code>#ExampleHeader</code> regardless of the current variation. This also allows you to start other headers while you are in a different header.</p> <p>For example:</p> <pre><code>#HelloWorld:1\nHello, World! ;\nWelcome to Loki! ;\n\n#HelloWorld:2\nThis is the second variation. ;\nIt also starts the GoodByeWorld header ;\n\n[#this.GoodByeWorld:1]\n\n#GoodByeWorld:1\nGood Bye, World! ;\nYou've been a great crowd! ;\n</code></pre> <p>This code will run through the HelloWorld Headers untill it reaches the second variation. After displaying the text, it will run the code <code>[#this.GoodByeWorld:1]</code> to call the GoodByeWorld Header. This will immeadiatly run and display/run any thing that is found in the called Header. </p> <p>One thing to note is that loki supports cross referenceing files. You have the ability to call another header or function in a separate file. More info here: Files.</p>"},{"location":"language-overview/#functions","title":"Functions","text":"<p>Functions work much like the headers but they are used to group code together that gets run all at once, in one single request. This differs from headers, found here: Headers</p> <p>to learn more about functions, see below:</p> <pre><code>#Print(string message)\n[@System.Print($message)] ;\n</code></pre> <p>In this code, we declare a function Print. Note that it uses a similar syntax to the header, the only difference being it has parenthesis instead of a collon and variation id.</p> <p>In order to call this function, you would insert this code into a header: <code>[&lt;file&gt;.&lt;functionName&gt;(&lt;parameters&gt;)]</code></p> <p>Here is an example of it in an actual loki file:</p> <pre><code>#HelloWorld:1\nHello, World! ;\nWelcome to Loki! [this.Print(\"Ended Variation 1\")];\n\n#HelloWorld:2\nThis is the second variation. ;\nIt also starts the GoodByeWorld header [this.Print(\"Ended Variation 2\")];\n\n#Print(string message)\n[@System.Print($message)] ;\n</code></pre> <p>Note how we use the keyword this. This keyword tells loki that the function we are calling is in the current file and there is no need to look elsewhere for it. For more details on files and libraries, see here: Files</p>"},{"location":"language-overview/#files","title":"Files","text":"<p>Loki uses a project structure similar to that of other programming languages such as C# or Python. You can call headers and functions in other files than the current one via the code <code>[&lt;file&gt;.&lt;function&gt;(&lt;parameters&gt;)]</code> for functions, and <code>[&lt;file&gt;.&lt;header&gt;:&lt;variationID&gt;]</code> for headers.</p> <p>In order to call a function or header in another file, this file must be imported at the toop of the loki file.</p> <p>For example:</p> <pre><code>/*************\n *Loki_01.loki\n*************/\n\n[using File_02]\n#HelloWorld:1\nHello, World! ;\nWelcome to Loki! [File_02.Print(\"Ended Variation 1\")];\n\n#HelloWorld:2\nThis is the second variation. ;\nIt does stuff [File_02.Print(\"Ended Variation 2\")];\n\n/*************\n *Loki_02.loki\n*************/\n\n#Print(string message)\n[@System.Print($message)] ;\n</code></pre> <p>This allows you to keep your code organized and modular.</p>"},{"location":"language-overview/#function-calls-vs-reference-calls","title":"Function Calls vs. Reference Calls","text":"<p>In Loki, there are two ways to call code from other headers or files: function calls and reference calls. Understanding the difference between these two methods is essential for creating efficient and well-organized code.</p>"},{"location":"language-overview/#function-calls","title":"Function Calls","text":"<p>Function calls are used to execute a specific function or method within a file. When a function is called, the code inside the function is executed, and the function may return a value. Function calls are denoted by square brackets <code>[]</code> and the function name, followed by parentheses containing any required arguments.</p> <p>For example:</p> <pre><code>[this.Print(\"Hello, World!\")]\n</code></pre> <p>In this example, we're calling the Print function from the current file (this) and passing the string \"Hello, World!\" as an argument. The function will be executed, and the string will be printed.</p>"},{"location":"language-overview/#reference-calls","title":"Reference Calls","text":"<p>Reference calls, on the other hand, are used to call code in the actual programming language your game is running on. When a reference call is made, the Loki code execution is paused, and the reference call is passed directly to the integration package, which then executes the code in the target language.</p> <p>Reference calls are denoted by square brackets [] and an at sign @, followed by the target language's code.</p> <p>For example:</p> <pre><code>[@Console.WriteLine(\"Hello, World!\")]\n</code></pre> <p>In this example, we're calling the Console.WriteLine method in the target language (e.g., C#). The Loki code execution will be paused, and the reference call will be passed directly to the integration package, which will then execute the Console.WriteLine method.</p> <p>It's important to note that reference calls can only be used to call code in the target language, not functions or headers within Loki files.</p> <p>Understanding the difference between function calls and reference calls will help you write more efficient and organized Loki code.</p>"},{"location":"language-overview/#conclusion","title":"Conclusion","text":"<p>Thank you for reading the Loki language specification! We hope this document has provided you with a clear understanding of the Loki programming language.</p>"},{"location":"guidelines/code-of-conduct/","title":"Code of conduct","text":""},{"location":"guidelines/code-of-conduct/#code-of-conduct","title":"Code of Conduct","text":"<p>As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.</p> <p>We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.</p> <p>Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team.</p> <p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.</p> <p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"guidelines/coding-style/","title":"Coding style","text":""},{"location":"guidelines/coding-style/#coding-style-guide","title":"Coding Style Guide","text":"<p>This document outlines the coding style guide for the Loki project. Please follow these guidelines when contributing code changes.</p>"},{"location":"guidelines/coding-style/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Use clear and concise variable, function, and class names.</li> <li>Use descriptive comments to explain complex or non-obvious parts of the code.</li> <li>Use consistent indentation (4 spaces).</li> <li>Use consistent spacing (e.g., around operators, after commas, etc.).</li> <li>Use consistent capitalization for variable, function, and class names.</li> </ul>"},{"location":"guidelines/coding-style/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Use lowerCamelCase for variable names.</li> <li>Use UpperCamelCase for class and function names.</li> <li>Use ALL_CAPS for constants.</li> </ul>"},{"location":"guidelines/coding-style/#code-formatting","title":"Code Formatting","text":"<ul> <li>Use consistent indentation (4 spaces).</li> <li>Use consistent line length (80 characters).</li> <li>Use consistent spacing (e.g., around operators, after commas, etc.).</li> <li>Use a single blank line between functions and classes.</li> <li>Use a single blank line between logical sections of code.</li> </ul>"},{"location":"guidelines/coding-style/#comments","title":"Comments","text":"<ul> <li>Use descriptive comments to explain complex or non-obvious parts of the code.</li> <li>Use block comments for function and class descriptions.</li> <li>Use inline comments sparingly, only when necessary.</li> </ul>"},{"location":"guidelines/coding-style/#error-handling","title":"Error Handling","text":"<ul> <li>Use exceptions for error handling.</li> <li>Use descriptive error messages.</li> <li>Catch and handle exceptions gracefully.</li> </ul>"},{"location":"guidelines/coding-style/#versioning","title":"Versioning","text":"<ul> <li>Code should be versioned along with the documentation.</li> <li>Use the appropriate version tag in the code file name or URL.</li> </ul>"},{"location":"guidelines/coding-style/#review-process","title":"Review Process","text":"<ul> <li>All code changes should be reviewed by at least one other contributor before merging.</li> <li>Use GitHub pull requests to submit and review code changes.</li> </ul> <p>Please follow these guidelines when contributing to our codebase. If you have any questions or suggestions, please open an issue on our GitHub repository.</p> <p>An easy way to ensure this is to simply run</p> <pre><code>dotnet format loki.sln\ndotnet format loki.csproj\n</code></pre> <p>In a command shell at the project's root folder</p>"},{"location":"guidelines/contribution-guide/","title":"Contribution guide","text":""},{"location":"guidelines/contribution-guide/#contribution-guidelines","title":"Contribution Guidelines","text":"<p>Thank you for considering contributing to Loki! We welcome contributions from everyone, and we're excited to have you join our community. This document outlines the process for submitting changes and improvements to the Loki project.</p>"},{"location":"guidelines/contribution-guide/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that this project is governed by a Code of Conduct. By participating, you agree to abide by its terms.</p>"},{"location":"guidelines/contribution-guide/#how-to-contribute","title":"How to Contribute","text":"<p>There are many ways to contribute to Loki, including but not limited to:</p> <ul> <li>Reporting bugs</li> <li>Suggesting new features</li> <li>Writing or editing documentation</li> <li>Submitting code changes</li> </ul>"},{"location":"guidelines/contribution-guide/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug in Loki, please open an issue on our GitHub repository. Be sure to include a clear and concise description of the bug, along with steps to reproduce it. If possible, include a code snippet or a link to a reproducible example.</p>"},{"location":"guidelines/contribution-guide/#suggesting-new-features","title":"Suggesting New Features","text":"<p>If you have an idea for a new feature or improvement to Loki, please open an issue on our GitHub repository. Be sure to include a clear and concise description of the feature, along with any relevant use cases or examples.</p>"},{"location":"guidelines/contribution-guide/#writing-or-editing-documentation","title":"Writing or Editing Documentation","text":"<p>If you find a mistake or want to improve our documentation, you can submit a pull request on our GitHub repository. Please follow the Documentation Style Guide when writing or editing documentation.</p>"},{"location":"guidelines/contribution-guide/#submitting-code-changes","title":"Submitting Code Changes","text":"<p>If you want to contribute code changes to Loki, please follow these steps:</p> <ol> <li>Fork the repository on GitHub.</li> <li>Clone the forked repository to your local machine.</li> <li>Create a new branch for your changes.</li> <li>Make your changes and commit them with a clear and concise commit message.</li> <li>Push your changes to your forked repository.</li> <li>Open a pull request on our GitHub repository.</li> </ol> <p>Please make sure that your code changes are well-tested and follow our Coding Style Guide.</p> <p>An easy way to ensure this is to simply run</p> <pre><code>dotnet format loki.sln\ndotnet format loki.csproj\n</code></pre> <p>In a command shell at the project's root folder</p>"},{"location":"guidelines/contribution-guide/#license","title":"License","text":"<p>By contributing to Loki, you agree that your contributions will be licensed under the same license as the project.</p>"},{"location":"guidelines/documentation-style/","title":"Documentation style","text":""},{"location":"guidelines/documentation-style/#documentation-style-guide","title":"Documentation Style Guide","text":"<p>This document outlines the style guide for writing and editing documentation for the Loki project. Please follow these guidelines when contributing to our documentation.</p>"},{"location":"guidelines/documentation-style/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Use clear and concise language.</li> <li>Write in the second person (you, your) to address the reader.</li> <li>Use American English spelling and grammar.</li> <li>Use Markdown syntax for formatting.</li> <li>Use code blocks for code snippets, using the appropriate language identifier.</li> <li>Use headings (<code>#</code>, <code>##</code>, <code>###</code>, etc.) to structure the document.</li> </ul>"},{"location":"guidelines/documentation-style/#documentation-structure","title":"Documentation Structure","text":"<p>Each documentation page should have the following structure:</p> <ol> <li>Title (<code>#</code>)</li> <li>Introduction (optional)</li> <li>Table of Contents (optional)</li> <li>Main Content</li> <li>Conclusion (optional)</li> <li>References (optional)</li> </ol>"},{"location":"guidelines/documentation-style/#code-examples","title":"Code Examples","text":"<ul> <li>Use code blocks for code examples.</li> <li>Use the appropriate language identifier for code blocks.</li> <li>Explain the purpose and usage of the code example.</li> <li>Use comments in code examples to explain complex or non-obvious parts.</li> </ul>"},{"location":"guidelines/documentation-style/#links","title":"Links","text":"<ul> <li>Use inline links for external resources.</li> <li>Use relative links for internal resources.</li> <li>Provide a descriptive link text.</li> </ul>"},{"location":"guidelines/documentation-style/#images","title":"Images","text":"<ul> <li>Use images sparingly, only when they add value to the documentation.</li> <li>Use the appropriate image format (PNG, JPEG, SVG, etc.).</li> <li>Provide a descriptive alt text for images.</li> </ul>"},{"location":"guidelines/documentation-style/#versioning","title":"Versioning","text":"<ul> <li>Documentation should be versioned along with the codebase.</li> <li>Use the appropriate version tag in the documentation file name or URL.</li> </ul>"},{"location":"guidelines/documentation-style/#review-process","title":"Review Process","text":"<ul> <li>All documentation changes should be reviewed by at least one other contributor before merging.</li> <li>Use GitHub pull requests to submit and review documentation changes.</li> </ul> <p>Please follow these guidelines when contributing to our documentation. If you have any questions or suggestions, please open an issue on our GitHub repository.</p>"},{"location":"integration-packages/overview/","title":"Overview","text":""},{"location":"integration-packages/overview/#loki-integration-packages","title":"Loki Integration Packages","text":""},{"location":"integration-packages/unity-installation-guide/","title":"Unity installation guide","text":""},{"location":"integration-packages/unity-installation-guide/#unity-installaton-guide","title":"Unity Installaton Guide","text":""}]}